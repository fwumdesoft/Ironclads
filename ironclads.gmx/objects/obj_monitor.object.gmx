<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monitor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var otherquadrant, facequadrant, otherdir;
otherdir = point_direction(x, y, obj_merrimack.x, obj_merrimack.y);
//Calculate what quadrant the other ship falls into
otherquadrant = find_quadrant(otherdir);
//Calculate current facing quadrant
facequadrant = find_quadrant(direction);
//If same- turn to face other ship
if(otherquadrant == facequadrant)
{
    if(direction - otherdir &lt; -1)
    {
        direction += 0.5;
    }
    else if(direction - otherdir &gt; 1)
    {
        direction -= 0.5;
    }
    else
        if(speed &lt; 3)
            speed += 0.2;
}
else
//If different- turn to face quadrant
{
    //Opposite quadrant
    if(abs(facequadrant-otherquadrant) == 2)
    {
        direction += 0.5;    
    }
    //Quadrant to the left
    else if(facequadrant + 1 == otherquadrant or (facequadrant == 1 and otherquadrant == 4))
    {
        direction += 0.5;    
    }
    //Quadrant to the right
    else if(facequadrant - 1 == otherquadrant or (facequadrant == 4 and otherquadrant == 1))
    {
        direction -= 0.5;    
    }
}*/
if(distance_to_object(obj_merrimack) &gt; RANGE / 4)
{
    mp_potential_settings(0.5, 0.5, 1, false);
    mp_potential_step(obj_merrimack.x, obj_merrimack.y, 0.6, false);
    direction = point_direction(xprevious, yprevious, x, y)
    image_angle = direction
    move_wrap(room_width, room_height, 100)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_cannonball">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
